#! /usr/bin/env python
"""Script to run openlibrary server.

USAGE:

* Run openlibrary http server at port 8080.

    $ ./scripts/openlibrary-server infogami.yml startserver 8080

* Run openlibrary as fastcgi server at port 7070

    $ ./scripts/openlibrary-server infogami.yml startserver fastcgi 8080
"""
import sys
import os
import _init_path
import web

from gunicorn.app.base import Application

def setup_env():
    # make sure PYTHON_EGG_CACHE is writable
    os.environ['PYTHON_EGG_CACHE'] = "/tmp/.python-eggs"

    # required when run as fastcgi
    os.environ['REAL_SCRIPT_NAME'] = ""

    sys.path.append('conf')

def start_server():
    args = sys.argv[1:]
    
    if len(args) < 1 or sys.argv[0] in ['-h', '--help']:
        print >> sys.stderr, "USAGE: %s configfile [subcommand] [arguments]" % (sys.argv[0])
        sys.exit(1)

    import infogami
    from infogami import config
        
    config.plugin_path += ['openlibrary.plugins']
    config.site = "openlibrary.org"
    
    infogami.main(*args)

def start_gunicorn_server():
    """Starts the openlibrary server using gunicorn server.
    """
    configfile = sys.argv.pop(1)
    web.config.debug = False
    
    def dummy(*a, **kw):
        pass

    class WSGIServer(Application):
        def init(self, parser, opts, args):
            pass

        def load(self):
            import infogami
            from infogami import config
            from infogami.utils import delegate
            
            config.plugin_path += ['openlibrary.plugins']
            config.site = "openlibrary.org"
            
            # add a dummy action and run it
            infogami.action(dummy)
            infogami.main(configfile, "dummy")
            
            wsgi_app = delegate.app.wsgifunc(*config.middleware)
            
            # setup middleware for handling /static
            wsgi_app = web.httpserver.StaticMiddleware(wsgi_app)

            return wsgi_app

    WSGIServer("%prog openlibrary.yml --gunicorn [options]").run()
    
class BaseWSGIServer(Application):
    def __init__(self, config_file):
        self.config_file = config_file
        Application.__init__(self)
    
    def init(self, parser, opts, args):
        pass
        
    def load(self):
        import infogami
        from infogami import config
        from infogami.utils import delegate
        
        config.plugin_path += ['openlibrary.plugins']
        config.site = "openlibrary.org"
        
        infogami.load_config(self.config_file)
        infogami._setup()
        
        wsgi_app = self.get_wsgi_app()
        # setup middleware for handling /static
        wsgi_app = web.httpserver.StaticMiddleware(wsgi_app)
        return wsgi_app
        
    def get_wsgi_app(self):
        raise NotImplementedError()
                
class OLWSGIServer(BaseWSGIServer):
    def get_wsgi_app(self):
        from infogami import config
        from infogami.utils import delegate
        
        return delegate.app.wsgifunc(*config.middleware)
        
class AdminWSGIServer(BaseWSGIServer):
    def get_wsgi_app(self):
        from openlibrary.admin import code
        code.setup()
        return code.app.wsgifunc()
    
def start_admin_server():
    """Starts the openlirbary admin using gunicorn server.
    """
    from gunicorn.app.base import Application

    configfile = sys.argv.pop(1)
    web.config.debug = False

    def dummy(*a, **kw):
        pass

    class WSGIServer(Application):
        def init(self, parser, opts, args):
            pass

        def load(self):
            import infogami
            from infogami import config
            from infogami.utils import delegate

            config.plugin_path += ['openlibrary.plugins']
            config.site = "openlibrary.org"

            # add a dummy action and run it
            infogami.action(dummy)
            infogami.main(configfile, "dummy")

            wsgi_app = delegate.app.wsgifunc(*config.middleware)

            # setup middleware for handling /static
            wsgi_app = web.httpserver.StaticMiddleware(wsgi_app)

            return wsgi_app

    WSGIServer("%prog openlibrary.yml --gunicorn [options]").run()
    

def main():
    setup_env()
    web.config.debug = False
    
    if "--gunicorn" in sys.argv:
        sys.argv.pop(sys.argv.index("--gunicorn"))        
        configfile = sys.argv.pop(1)
        OLWSGIServer(configfile).run()
    if "--admin" in sys.argv:
        sys.argv.pop(sys.argv.index("--admin"))
        configfile = sys.argv.pop(1)
        AdminWSGIServer(configfile).run()
    else:
        start_server()

if __name__ == "__main__":
    main()
